from pywdl.antlr.WdlParser import WdlParser
from pywdl.antlr.WdlParserVisitor import WdlParserVisitor


class AntlrToWorkflow(WdlParserVisitor):
    """
    Convert the WDL syntax trees generated by Antlr4 to Python objects.
    """

    def visitDocument(self, ctx: WdlParser.DocumentContext):
        """
        Top level tree. Contains `version` followed by any number of `document_element`.
        """
        self.visitVersion(ctx.version())
        for element in ctx.document_element():
            self.visitDocument_element(element)

    def visitVersion(self, ctx: WdlParser.VersionContext):
        assert str(ctx.RELEASE_VERSION()) in ('1.0', 'development'), \
            f'Unknown version: {str(ctx.RELEASE_VERSION())}.'

    def visitDocument_element(self, ctx: WdlParser.Document_elementContext):
        """
        A child of 'import_doc', 'struct', 'workflow', or 'task'.
        """
        # TODO: add support for imports.
        assert isinstance(ctx.children[0], (WdlParser.WorkflowContext,
                                            WdlParser.TaskContext,
                                            WdlParser.ScatterContext)), \
            'Import is not supported.'

        return self.visit(ctx.children[0])

    def visitWorkflow(self, ctx: WdlParser.WorkflowContext):
        """
        Contains an 'identifier' and an array of `workflow_element`.
        """
        # TODO: store this

        identifier = ctx.Identifier().getText()
        print(f'Visiting workflow: {identifier}')

        for element in ctx.workflow_element():
            self.visit(element)

    def visitWorkflow_input(self, ctx: WdlParser.Workflow_inputContext):
        """
        Contains an array of 'any_decls', which can be an unbounded or bounded declaration.

        Example:
            input {
              String in_str = "twenty"
              Int in_int
            }
        """
        for decls in ctx.any_decls():
            self.visit(decls)

    def visitUnbound_decls(self, ctx: WdlParser.Unbound_declsContext):
        print('visitUnbound_decls')
        return super().visitChildren(ctx)

    # def visitBound_decls(self, ctx: WdlParser.Bound_declsContext):
    #     print('visitBound_decls')
    #     return super().visitChildren(ctx)

    def visitWdl_type(self, ctx: WdlParser.Wdl_typeContext):
        # typeCtx: WdlParser.Type_baseContext = ctx.type_base()
        # optional = ctx.OPTIONAL() is not None
        super().visitChildren(ctx)

    def visitCall(self, ctx: WdlParser.CallContext):
        print("visitCall")

    def visitTask(self, ctx: WdlParser.TaskContext):
        super().visitChildren(ctx)

    def visitScatter(self, ctx: WdlParser.ScatterContext):
        super().visitChildren(ctx)
