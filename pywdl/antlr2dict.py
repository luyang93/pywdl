from collections import OrderedDict  # TODO: switch to dict.

from pywdl.antlr.WdlParser import WdlParser
from pywdl.antlr.WdlParserVisitor import WdlParserVisitor
from antlr4.tree.Tree import TerminalNodeImpl
from pywdl.types import (
    WDLStringType,
    WDLIntType,
    WDLFloatType,
    WDLBooleanType,
    WDLFileType,
    WDLArrayType,
    WDLPairType,
    WDLMapType
)


class AntlrToDict(WdlParserVisitor):
    """
    Convert the WDL syntax trees generated by Antlr4 to working Python code as
    strings stored in dictionaries.
    """

    primitive_types = {
        'String': WDLStringType,
        'Int': WDLIntType,
        'Float': WDLFloatType,
        'Boolean': WDLBooleanType,
        'File': WDLFileType,
        'Directory': None,  # to be implemented.
    }

    def __init__(self, ):
        # holds workflow structure from WDL workflow objects
        self.workflows_dictionary = dict()

        # holds task skeletons from WDL task objects
        self.tasks_dictionary = dict()

        # unique iterator to add to cmd names
        self.command_number = 0

        # unique iterator to add to call names
        self.call_number = 0

        # unique iterator to add to scatter names
        self.scatter_number = 0

        # unique iterator to add to if names
        self.if_number = 0

    def visitDocument(self, ctx: WdlParser.DocumentContext):
        """
        Root of tree. Contains `version` followed by any number of `document_element`s.
        """
        self.visitVersion(ctx.version())
        for element in ctx.document_element():
            self.visitDocument_element(element)

    def visitVersion(self, ctx: WdlParser.VersionContext):
        assert str(ctx.RELEASE_VERSION()) in ('1.0', 'development'), \
            f'Unsupported version: {str(ctx.RELEASE_VERSION())}.'

    def visitDocument_element(self, ctx: WdlParser.Document_elementContext):
        """
        Contains one of the following: 'import_doc', 'struct', 'workflow', or 'task'.
        """
        # TODO: add support for imports.
        assert isinstance(ctx.children[0], (WdlParser.WorkflowContext,
                                            WdlParser.TaskContext,
                                            WdlParser.ScatterContext)), \
            'Import is not supported.'

        return self.visitChildren(ctx)

    # Workflow section

    def visitWorkflow(self, ctx: WdlParser.WorkflowContext):
        """
        Contains an 'identifier' and an array of `workflow_element`s.
        """
        identifier = ctx.Identifier().getText()
        self.workflows_dictionary.setdefault(identifier, OrderedDict())
        self.workflows_dictionary[identifier].setdefault('wf_declarations', {})
        print(f'Visiting workflow: {identifier}')

        for element in ctx.workflow_element():
            section = element.children[0]

            # inputs
            if isinstance(section, WdlParser.Workflow_inputContext):
                self.workflows_dictionary[identifier]['wf_declarations'].update(self.visitWorkflow_input(section))

            # non-input declarations, scatters, calls, and conditionals
            elif isinstance(section, WdlParser.Inner_workflow_elementContext):
                wf_key, contents = self.visitInner_workflow_element(section)
                self.workflows_dictionary[identifier].setdefault(wf_key, {}).update(contents)

            # outputs
            elif isinstance(section, WdlParser.Workflow_outputContext):
                self.workflows_dictionary[identifier]['wf_outputs'] = self.visitWorkflow_output(section)

            # O.o
            else:
                raise RuntimeError(f'Unsupported workflow element in visitWorkflow(): {type(section)}')

    def visitWorkflow_input(self, ctx: WdlParser.Workflow_inputContext):
        """
        Contains an array of 'any_decls', which can be unbounded or bounded declarations.

        Example:
            input {
              String in_str = "twenty"
              Int in_int
            }

        Returns an array of tuples=(name, decl).
        """
        return [self.visitAny_decls(decl) for decl in ctx.any_decls()]

    def visitWorkflow_output(self, ctx: WdlParser.Workflow_outputContext):
        """
        Contains an array of 'bound_decls' (unbound_decls not allowed).

        Example:
            output {
              String out_str = read_string(stdout())
            }

        Returns an array of tuples=(name, decl).
        """
        return [self.visitBound_decls(decl) for decl in ctx.bound_decls()]

    def visitInner_workflow_element(self, ctx: WdlParser.Inner_workflow_elementContext):
        """
        Returns a tuple=(wf_key, contents)
        """
        element = ctx.children[0]

        # bound_decls (e.g.: declarations declared outside of input section)
        if isinstance(element, WdlParser.Bound_declsContext):
            # append this to `wf_declarations` for Toil.
            return 'wf_declarations', [self.visitBound_decls(element)]
        # call
        elif isinstance(element, WdlParser.CallContext):
            pass
        # scatter
        elif isinstance(element, WdlParser.ScatterContext):
            pass
        # conditional
        elif isinstance(element, WdlParser.ConditionalContext):
            pass

        return 'UNIMPLEMENTED', {}

    def visitCall(self, ctx: WdlParser.CallContext):
        """
        Contains `call_name`, `call_alias`, `call_afters`, and `call_body`.

        Example: call task_1 {input: arr=arr}
        """
        # FIXME: `call_afters` is added in the development version so it is not supported by Toil.

        # return this:
        # ('call0', {
        #   'task': 'task_1',
        #   'alias': 'task_1',
        #   'io': OrderedDict([
        #     ('in_str', 'in_str')
        #   ])
        # })

        # TODO
        # return self.visitChildren(ctx)

    def visitScatter(self, ctx: WdlParser.ScatterContext):
        """

        """
        # TODO
        # return self.visitChildren(ctx)

    def visitConditional(self, ctx: WdlParser.ConditionalContext):
        """

        """
        # TODO
        # return self.visitChildren(ctx)

    # Task section

    def visitTask(self, ctx: WdlParser.TaskContext):
        print('visitTask')
        # return super().visitChildren(ctx)

    #

    # Shared

    def visitUnbound_decls(self, ctx: WdlParser.Unbound_declsContext):
        """
        Contains an unbounded input declaration. E.g.: `String in_str`.

        Returns a tuple=(`name`, dict={`name`, `type`, `value`}), where `value` is None.
        """
        name = ctx.Identifier().getText()
        type_ = self.visitWdl_type(ctx.wdl_type())
        return name, OrderedDict({'name': name, 'type': type_, 'value': None})

    def visitBound_decls(self, ctx: WdlParser.Bound_declsContext):
        """
        Contains a bounded input declaration. E.g.: `String in_str = "some string"`.

        Returns a tuple=(`name`, dict={`name`, `type`, `value`}).
        """
        name = ctx.Identifier().getText()
        type_ = self.visitWdl_type(ctx.wdl_type())
        expr = self.visitChildren(ctx.expr())

        # assert expr in ('true', 'false'), 'Parsed boolean ({}) must be expressed as "true" or "false".'
        if isinstance(type_, WDLBooleanType) and expr in ('true', 'false'):
            expr = expr.capitalize()

        return name, OrderedDict({'name': name, 'type': type_, 'value': expr})

    def visitWdl_type(self, ctx: WdlParser.Wdl_typeContext):
        """
        Returns a WDLType instance.
        """
        var_type: WdlParser.Type_baseContext = ctx.type_base().children[0]
        optional = ctx.OPTIONAL() is not None

        # base level
        if isinstance(var_type, TerminalNodeImpl):
            type_ = self.primitive_types.get(var_type.getText())
            if type_:
                return type_(optional=optional)
            else:
                raise RuntimeError(f'Unsupported primitive type: {var_type.getText()}')
        # recursively visit compound types
        elif isinstance(var_type, WdlParser.Array_typeContext):
            # Array[element]
            return WDLArrayType(element=self.visitWdl_type(var_type.wdl_type()), optional=optional)
        elif isinstance(var_type, WdlParser.Pair_typeContext):
            # Pair[left, right]
            return WDLPairType(
                left=self.visitWdl_type(var_type.wdl_type(0)), right=self.visitWdl_type(var_type.wdl_type(1)),
                optional=optional)
        elif isinstance(var_type, WdlParser.Map_typeContext):
            # Map[left, right]
            return WDLMapType(
                key=self.visitWdl_type(var_type.wdl_type(0)), value=self.visitWdl_type(var_type.wdl_type(1)),
                optional=optional)
        else:
            raise RuntimeError(f'Unsupported type: {var_type.getText()}')

    def visitPrimitive_literal(self, ctx: WdlParser.Primitive_literalContext):
        """
        Returns the primitive literal as a string.
        """
        if isinstance(ctx.children[0], (TerminalNodeImpl,
                                        WdlParser.StringContext,
                                        WdlParser.NumberContext)):
            return ctx.children[0].getText()
        else:
            raise RuntimeError(f'Primitive literal has unknown child: {type(ctx.children[0])}.')

    # expr_infix0
    def visitLor(self, ctx: WdlParser.LorContext):
        """
        Logical OR infix.
        """
        lhs = self.visitInfix0(ctx.expr_infix0())
        if isinstance(ctx.expr_infix1(), WdlParser.LandContext):
            rhs = self.visitLand(ctx.expr_infix1())
        else:
            rhs = self.visitInfix1(ctx.expr_infix1())
        return f'{lhs} or {rhs}'

    # expr_infix1
    def visitLand(self, ctx: WdlParser.LandContext):
        """
        Logical AND infix.
        """
        lhs = self.visitInfix1(ctx.expr_infix1())
        rhs = self.visitInfix2(ctx.expr_infix2())
        return f'{lhs} and {rhs}'

    # expr_core
    # see: https://github.com/w-gao/wdl/blob/main/versions/development/parsers/antlr4/WdlParser.g4#L121

    def visitArray_literal(self, ctx: WdlParser.Array_literalContext):
        """
        Pattern: LBRACK (expr (COMMA expr)*)* RBRACK
        """
        return f"[{', '.join(self.visitExpr(expr) for expr in ctx.expr())}]"

    # expr_core
    def visitPair_literal(self, ctx: WdlParser.Pair_literalContext):
        """
        Pattern: LPAREN expr COMMA expr RPAREN
        """
        return f"({self.visitExpr(ctx.expr(0))}, {self.visitExpr(ctx.expr(1))})"

    # expr_core
    def visitMap_literal(self, ctx: WdlParser.Map_literalContext):
        """
        Pattern: LBRACE (expr COLON expr (COMMA expr COLON expr)*)* RBRACE
        """
        # return f"{{{', '.join()}}}"
        pass

    # expr_core
    def visitStruct_literal(self, ctx:WdlParser.Struct_literalContext):
        """
        Pattern: Identifier LBRACE (Identifier COLON expr (COMMA Identifier COLON expr)*)* RBRACE
        """
        raise NotImplementedError(f'Structs are not implemented yet :(')

    # expr_core
    def visitIfthenelse(self, ctx: WdlParser.IfthenelseContext):
        """
        Pattern: IF expr THEN expr ELSE expr
        """
        pass

    # expr_core
    def visitExpression_group(self, ctx: WdlParser.Expression_groupContext):
        """
        Pattern: LPAREN expr RPAREN
        """
        return f'({self.visitExpr(ctx.expr())})'
